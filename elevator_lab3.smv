-- Лифт 
-- Имеется N-этажный дом с лифтом. На каждом этаже есть N-1  кнопка с номером этажа, куда хочет поехать пассажир (все,кроме текущего). 
-- На этаж могут прийти пассажиры и вызвать лифт, нажатием одной из кнопок. Когда лифт останавливается, то пассажир входит и едет на на нужный этаж.
-- Если лифт едет вверх, а пассажиру надо вниз, то лифт не останавливается на этаже (и наоборот).	
-- Необходимо реализовать алгоритмов работы лифта.
-- После реализации проверить свойства этого алгоритма:
    -- Если пассажир вызвал лифт, то в конце концов он сможет на нем проехать
    -- Если лифт едет в том же направлении, куда надо пассажиру на этаже, то лифт его подберет 
    -- Лифт не останавливается на этаже, где его вызвали в другую сторону

MODULE elevator
	VAR
		cabin_at : 1..5;
		target : 0..5;
		direction : {UP, DOWN};
		cl_request_for_1 : boolean;
		cl_request_for_2 : boolean;
		cl_request_for_3 : boolean;
		cl_request_for_4 : boolean;
		cl_request_for_5 : boolean;
	ASSIGN
		init(cabin_at) := 1;
		init(target) := 0;
		init(direction) := UP;
		-- Реквесты пассажиров внутри лифта (какую кнопку нажимали на этаже)
		init(cl_request_for_1) := FALSE;
		init(cl_request_for_2) := FALSE;
		init(cl_request_for_3) := FALSE;
		init(cl_request_for_4) := FALSE;
		init(cl_request_for_5) := FALSE;
	DEFINE
		has_target := target != 0;
		
MODULE house_floor(i)
	VAR
		-- Кнопка на этаже
		requested_for : {1, 2, 3, 4, 5}; 
	ASSIGN
		init(requested_for) := i;
	DEFINE
		requested := requested_for != i;

MODULE controller
	VAR
		e : elevator;
		f1 : house_floor(1);
		f2 : house_floor(2);
		f3 : house_floor(3);
		f4 : house_floor(4);
		f5 : house_floor(5);

	DEFINE
		-- Цель достигнута если кабина лифта на нужном этаже и направления запроса с этажа совпадает с текущим направлением движения лифта
		met_target := (e.cabin_at = e.target)
			? 	(e.cabin_at = 1)
				| (e.cabin_at = 2 & f2.requested_for >= 2 & e.direction = UP)
				| (e.cabin_at = 3 & f3.requested_for >= 3 & e.direction = UP)
				| (e.cabin_at = 4 & f4.requested_for >= 4 & e.direction = UP)
				| (e.cabin_at = 5)
				| (e.cabin_at = 4 & f4.requested_for <= 4 & e.direction = DOWN)
				| (e.cabin_at = 3 & f3.requested_for <= 3 & e.direction = DOWN)
				| (e.cabin_at = 2 & f2.requested_for <= 2 & e.direction = DOWN)
			:	FALSE;
		
		may_change_target := !e.has_target | met_target;
	
	ASSIGN		
		next(f1.requested_for) := case
			e.target = 1 & met_target : 1;
			f1.requested_for != 1 : f1.requested_for;
			TRUE : {1, 2, 3, 4, 5};
		esac;

		next(f2.requested_for) := case
			e.target = 2 & met_target : 2;
			f2.requested_for != 2 : f2.requested_for;
			TRUE : {1, 2, 3, 4, 5};
		esac;

		next(f3.requested_for) := case
			e.target = 3 & met_target : 3;
			f3.requested_for != 3 : f3.requested_for;
			TRUE : {1, 2, 3, 4, 5};
		esac;

		next(f4.requested_for) := case
			e.target = 4 & met_target : 4;
			f4.requested_for != 4 : f4.requested_for;
			TRUE : {1, 2, 3, 4, 5};
		esac;

		next(f5.requested_for) := case
			e.target = 5 & met_target : 5;
			f5.requested_for != 5 : f5.requested_for;
			TRUE : {1, 2, 3, 4, 5};
		esac;

		next(e.direction) := case
			!may_change_target & e.has_target & e.cabin_at = 4 & e.direction = UP : DOWN;
			!may_change_target & e.has_target & e.cabin_at = 2 & e.direction = DOWN : UP;
			TRUE : e.direction;
		esac;

		next(e.cabin_at) := case
			!may_change_target & e.has_target & e.direction = UP & e.cabin_at < 5 : e.cabin_at + 1;
			!may_change_target & e.has_target & e.direction = DOWN & e.cabin_at > 1 : e.cabin_at - 1;
			TRUE : e.cabin_at;
		esac;

		next(e.cl_request_for_1) :=  case
			e.cl_request_for_1 & e.target = 1 & met_target : FALSE;
			f2.requested & f2.requested_for = 1 & e.target = 2 & met_target : TRUE;
			f3.requested & f3.requested_for = 1 & e.target = 3 & met_target : TRUE;
			f4.requested & f4.requested_for = 1 & e.target = 4 & met_target : TRUE;
			f5.requested & f5.requested_for = 1 & e.target = 5 & met_target : TRUE;
			TRUE: e.cl_request_for_1;
		esac;

		next(e.cl_request_for_2) :=  case
			e.cl_request_for_2 & e.target = 2 & met_target : FALSE;
			f1.requested & f1.requested_for = 2 & e.target = 1 & met_target : TRUE;
			f3.requested & f3.requested_for = 2 & e.target = 3 & met_target : TRUE;
			f4.requested & f4.requested_for = 2 & e.target = 4 & met_target : TRUE;
			f5.requested & f5.requested_for = 2 & e.target = 5 & met_target : TRUE;
			TRUE: e.cl_request_for_2;
		esac;

		next(e.cl_request_for_3) :=  case
			e.cl_request_for_3 & e.target = 3 & met_target : FALSE;
			f1.requested & f1.requested_for = 3 & e.target = 1 & met_target : TRUE;
			f2.requested & f2.requested_for = 3 & e.target = 2 & met_target : TRUE;
			f4.requested & f4.requested_for = 3 & e.target = 4 & met_target : TRUE;
			f5.requested & f5.requested_for = 3 & e.target = 5 & met_target : TRUE;
			TRUE: e.cl_request_for_3;
		esac;
		
		next(e.cl_request_for_4) :=  case
			e.cl_request_for_4 & e.target = 4 & met_target : FALSE;
			f1.requested & f1.requested_for = 4 & e.target = 1 & met_target : TRUE;
			f2.requested & f2.requested_for = 4 & e.target = 2 & met_target : TRUE;
			f3.requested & f3.requested_for = 4 & e.target = 3 & met_target : TRUE;
			f5.requested & f5.requested_for = 4 & e.target = 5 & met_target : TRUE;
			TRUE: e.cl_request_for_4;
		esac;

		next(e.cl_request_for_5) :=  case
			e.cl_request_for_5 & e.target = 5 & met_target : FALSE;
			f1.requested & f1.requested_for = 5 & e.target = 1 & met_target : TRUE;
			f2.requested & f2.requested_for = 5 & e.target = 2 & met_target : TRUE;
			f3.requested & f3.requested_for = 5 & e.target = 3 & met_target : TRUE;
			f4.requested & f4.requested_for = 5 & e.target = 4 & met_target : TRUE;
			TRUE: e.cl_request_for_5;
		esac;

		next(e.target) := case 
			-- Лифт довозит пассажиров (приоритет довоза)
			e.cl_request_for_5 & e.direction = UP & e.cabin_at = 4 : 5;
			e.cl_request_for_4 & e.direction = UP & e.cabin_at = 3 : 4;
			e.cl_request_for_3 & e.direction = UP & e.cabin_at = 2 : 3;
			e.cl_request_for_2 & e.direction = UP & e.cabin_at = 1 : 2;
			e.cl_request_for_1 & e.direction = DOWN & e.cabin_at = 2 : 1;
			e.cl_request_for_2 & e.direction = DOWN & e.cabin_at = 3 : 2;
			e.cl_request_for_3 & e.direction = DOWN & e.cabin_at = 4 : 3;
			e.cl_request_for_4 & e.direction = DOWN & e.cabin_at = 5 : 4;
			-- Лифт подбирает пассажиров по пути
			e.target != 0 & e.direction = UP & e.cabin_at < 2 & (f2.requested_for = 3 | f2.requested_for = 4 | f2.requested_for = 5) : 2;
			e.target != 0 & e.direction = UP & e.cabin_at < 3 & (f3.requested_for = 4 | f3.requested_for = 5) : 3;
			e.target != 0 & e.direction = UP & e.cabin_at < 4 & (f4.requested_for = 5) : 4;
			e.target != 0 & e.direction = UP & e.cabin_at = 4 & f5.requested : 5; 
			e.target != 0 & e.direction = DOWN & e.cabin_at > 4 & (f4.requested_for = 3 | f4.requested_for = 2 | f4.requested_for = 1) : 4;
			e.target != 0 & e.direction = DOWN & e.cabin_at > 3 & (f3.requested_for = 2 | f3.requested_for = 1) : 3;
			e.target != 0 & e.direction = DOWN & e.cabin_at > 2 & (f2.requested_for = 1): 2;
			e.target != 0 & e.direction = DOWN & e.cabin_at = 2 & f1.requested : 1; 
			-- Лифт довозит пассажиров если запросов с этажей нет
			e.cl_request_for_1 : 1;
			e.cl_request_for_2 : 2;
			e.cl_request_for_3 : 3;
			e.cl_request_for_4 : 4;
			e.cl_request_for_5 : 5; 
			-- Лифт реагирует на запрос с этажа
			may_change_target & f1.requested : 1;
			may_change_target & f2.requested : 2;
			may_change_target & f3.requested : 3;
			may_change_target & f4.requested : 4;
			may_change_target & f5.requested : 5;

			TRUE : e.target;
		esac;
	
MODULE main
	VAR
		c : controller;
		-- Если пассажир вызвал лифт, то в конце концов он сможет на нем проехать
		LTLSPEC G (c.f1.requested -> F (c.e.cabin_at = 1 & c.met_target))
		LTLSPEC G (c.f2.requested -> F (c.e.cabin_at = 2 & c.met_target))
		LTLSPEC G (c.f3.requested -> F (c.e.cabin_at = 3 & c.met_target))
		LTLSPEC G (c.f4.requested -> F (c.e.cabin_at = 4 & c.met_target))
		LTLSPEC G (c.f5.requested -> F (c.e.cabin_at = 5 & c.met_target))

		-- Пассажир сможет доехать до нужной ему точки
		LTLSPEC G (c.e.cl_request_for_1 -> F (c.e.cabin_at = 1 & c.met_target))
		LTLSPEC G (c.e.cl_request_for_2 -> F (c.e.cabin_at = 2 & c.met_target))
		LTLSPEC G (c.e.cl_request_for_3 -> F (c.e.cabin_at = 3 & c.met_target))
		LTLSPEC G (c.e.cl_request_for_4 -> F (c.e.cabin_at = 4 & c.met_target))
		LTLSPEC G (c.e.cl_request_for_5 -> F (c.e.cabin_at = 5 & c.met_target))

		-- Пассажир действительно едет до нужной точки
		LTLSPEC G (c.f1.requested_for = 2 & c.e.cabin_at = 1 & c.met_target -> next(!c.f1.requested & c.e.cl_request_for_2))
		LTLSPEC G (c.f2.requested_for = 3 & c.e.cabin_at = 2 & c.met_target & c.e.direction = UP -> next(!c.f2.requested & c.e.cl_request_for_3))
		LTLSPEC G (c.f3.requested_for = 4 & c.e.cabin_at = 3 & c.met_target & c.e.direction = UP -> next(!c.f3.requested & c.e.cl_request_for_4))
		LTLSPEC G (c.f4.requested_for = 5 & c.e.cabin_at = 4 & c.met_target & c.e.direction = UP  -> next(!c.f4.requested & c.e.cl_request_for_5))
		LTLSPEC G (c.f5.requested_for = 4 & c.e.cabin_at = 5 & c.met_target -> next(!c.f5.requested & c.e.cl_request_for_4))
		LTLSPEC G (c.f4.requested_for = 3 & c.e.cabin_at = 4 & c.met_target & c.e.direction = DOWN -> next(!c.f4.requested & c.e.cl_request_for_3))
		LTLSPEC G (c.f3.requested_for = 2 & c.e.cabin_at = 3 & c.met_target & c.e.direction = DOWN -> next(!c.f3.requested & c.e.cl_request_for_2))
		LTLSPEC G (c.f2.requested_for = 1 & c.e.cabin_at = 2 & c.met_target & c.e.direction = DOWN  -> next(!c.f2.requested & c.e.cl_request_for_1))

		-- Если лифт едет в том же направлении, куда надо пассажиру на этаже, то лифт его подберет
		LTLSPEC G (c.e.cabin_at = 1 & c.e.target > 2 & c.e.direction = UP & (c.f2.requested_for = 3 | c.f2.requested_for = 4 | c.f2.requested_for = 5) -> next(c.met_target & c.e.target = 2))
		LTLSPEC G (c.e.cabin_at = 2 & c.e.target > 3 & c.e.direction = UP & (c.f3.requested_for = 4 | c.f3.requested_for = 5) -> next(c.met_target & c.e.target = 3))
		LTLSPEC G (c.e.cabin_at = 3 & c.e.target > 4 & c.e.direction = UP & c.f4.requested_for = 5 -> next(c.met_target & c.e.target = 4))
		LTLSPEC G (c.e.cabin_at = 4 & c.e.direction = UP & c.f5.requested -> next(c.e.target = 5))
		LTLSPEC G (c.e.cabin_at = 5 & c.e.target < 4 & c.e.direction = DOWN & (c.f4.requested_for = 3 | c.f4.requested_for = 2 | c.f4.requested_for = 1) -> next(c.met_target & c.e.target = 4))
		LTLSPEC G (c.e.cabin_at = 4 & c.e.target < 3 & c.e.direction = DOWN & (c.f3.requested_for = 2 | c.f3.requested_for = 1) -> next(c.met_target & c.e.target = 3))
		LTLSPEC G (c.e.cabin_at = 3 & c.e.target < 2 & c.e.direction = DOWN & c.f2.requested_for = 1 -> next(c.met_target & c.e.target = 2))
		LTLSPEC G (c.e.cabin_at = 2 & c.e.direction = DOWN & c.f1.requested -> next(c.e.target = 1))

		-- Лифт не останавливается на этаже, где его вызвали в другую сторону
		LTLSPEC G (c.e.cabin_at = 1 & c.e.target > 2 & c.e.direction = UP & c.f2.requested_for = 1 -> next(!c.met_target))
		LTLSPEC G (c.e.cabin_at = 2 & c.e.target > 3 & c.e.direction = UP & (c.f3.requested_for = 1 | c.f3.requested_for = 2) -> next(!c.met_target))
		LTLSPEC G (c.e.cabin_at = 3 & c.e.target > 4 & c.e.direction = UP & (c.f4.requested_for = 1 | c.f4.requested_for = 2 | c.f4.requested_for = 2) -> next(!c.met_target))
		LTLSPEC G (c.e.cabin_at = 5 & c.e.target < 4 & c.e.direction = DOWN & c.f4.requested_for = 5 -> next(!c.met_target))
		LTLSPEC G (c.e.cabin_at = 4 & c.e.target < 3 & c.e.direction = DOWN & (c.f3.requested_for = 5 | c.f3.requested_for = 4) -> next(!c.met_target))
		LTLSPEC G (c.e.cabin_at = 3 & c.e.target < 2 & c.e.direction = DOWN & (c.f2.requested_for = 5 | c.f2.requested_for = 4 | c.f2.requested_for = 3) -> next(!c.met_target))
